name: CI/CD Pipeline

on:
  push:
    branches: [ main ]  # ✓ Requirement 1: Trigger on main branch commits

env:
  NODE_VERSION: '18'

# Adicione as permissões necessárias
permissions:
  contents: write
  packages: write
  issues: write

jobs:
  quality-check:
    runs-on: ubuntu-latest  # Usando o runner padrão do GitHub
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Build Custom Action
        working-directory: .github/actions/custom-linter
        run: |
          npm install
          npm run build
          npm run package
      
      - name: Custom TypeScript Linter Action
        uses: ./.github/actions/custom-linter
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}  # GitHub automatically provides this

  build-and-test:
    needs: quality-check
    runs-on: ubuntu-latest  # Usando o runner padrão do GitHub
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      # ✓ Requirement 2: Install dependencies
      - name: Install Dependencies
        run: npm install
      
      # ✓ Requirement 2: Run unit tests
      - name: Run Tests
        run: npm test
      
      # ✓ Requirement 2: Build application
      - name: Build Application
        run: npm run build
      
      # ✓ Requirement 2: Store artifact as GitHub release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/app.zip
          asset_name: app.zip
          asset_content_type: application/zip

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: 
      name: staging  # ✓ Requirement 2: Using GitHub environments for deployment approval
    
    steps:
      # ✓ Requirement 3: Deploy to test environment
      - name: Deploy to Test Environment
        run: |
          echo "Deploying to test environment"
          # Add your deployment commands here 